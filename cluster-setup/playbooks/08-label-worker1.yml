---
- name: Label worker1 node for AWS workloads
  hosts: master1
  become: true
  gather_facts: true
  vars_files:
    - ../vars/main.yml

  tasks:
    - name: Get Terraform outputs
      shell: |
        cd {{ terraform_dir }} && terraform output -json
      register: terraform_outputs_json
      changed_when: false
      failed_when: false
      delegate_to: localhost

    - name: Parse Terraform outputs
      set_fact:
        terraform_outputs: "{{ terraform_outputs_json.stdout | from_json }}"

    - name: Set cluster name from Terraform outputs
      set_fact:
        terraform_cluster_name: "{{ terraform_outputs.cluster_name.value }}"

    - name: Get worker1 node name by hostname pattern
      shell: |
        kubectl get nodes -o json | jq -r '.items[] | select(.metadata.name | contains("worker-1")) | .metadata.name'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: worker1_node_name
      changed_when: false

    - name: Display worker1 node name
      debug:
        msg: "Found worker1 node: {{ worker1_node_name.stdout }}"
      when: worker1_node_name.stdout != ""

    - name: Check if worker1 node label already exists
      shell: |
        kubectl get node {{ worker1_node_name.stdout }} --show-labels | grep -q "aws-workloads=enabled" || echo "not_labeled"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: label_check
      changed_when: false
      failed_when: false
      when: worker1_node_name.stdout != ""

    - name: Label worker1 node for AWS workloads
      shell: |
        kubectl label node {{ worker1_node_name.stdout }} aws-workloads=enabled --overwrite
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: node_label
      changed_when: "'labeled' in node_label.stdout or 'already labeled' in node_label.stderr or 'label' in node_label.stdout"
      failed_when: node_label.rc != 0 and 'already labeled' not in node_label.stderr
      when: worker1_node_name.stdout != ""

    - name: Verify worker1 node label was applied
      shell: |
        kubectl get node {{ worker1_node_name.stdout }} --show-labels
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: final_label_check
      changed_when: false
      when: worker1_node_name.stdout != ""

    - name: Display label verification
      debug:
        msg: "Worker1 node labels: {{ final_label_check.stdout }}"
      when: worker1_node_name.stdout != "" and final_label_check.stdout is defined

    - name: Fail if worker1 node not found
      fail:
        msg: "Could not find worker1 node. Make sure the cluster is initialized and worker nodes are joined."
      when: worker1_node_name.stdout == ""

