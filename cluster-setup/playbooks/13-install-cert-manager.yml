---
- name: Install Cert Manager
  hosts: master1
  become: true
  gather_facts: true
  vars_files:
    - ../vars/main.yml

  tasks:
    - name: Add jetstack Helm repository
      shell: |
        helm repo add jetstack {{ cert_manager_repository }}
        helm repo update
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: helm_repo_add
      changed_when: "'jetstack' in helm_repo_add.stdout or 'has been added' in helm_repo_add.stdout"

    - name: Create namespace for Cert Manager
      shell: |
        kubectl create namespace {{ cert_manager_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: namespace_create
      changed_when: "'created' in namespace_create.stdout or 'configured' in namespace_create.stdout"

    - name: Install Cert Manager using Helm
      shell: |
        helm upgrade --install {{ cert_manager_release_name }} {{ cert_manager_repository }}/{{ cert_manager_chart }} \
          --namespace {{ cert_manager_namespace }} \
          --version {{ cert_manager_chart_version }} \
          --set installCRDs=true \
          --wait \
          --timeout {{ helm_timeout }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: helm_install
      changed_when: "'STATUS: deployed' in helm_install.stdout or 'has been upgraded' in helm_install.stdout"

    - name: Display Helm installation output
      debug:
        var: helm_install.stdout_lines

    - name: Verify Cert Manager pods are running
      shell: |
        kubectl get pods -n {{ cert_manager_namespace }} -l app.kubernetes.io/name={{ cert_manager_chart }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: pod_status
      until: >
        pod_status.stdout is defined and
        ('Running' in pod_status.stdout or 'Completed' in pod_status.stdout) and
        '0/2' not in pod_status.stdout and
        '0/1' not in pod_status.stdout
      retries: 30
      delay: 10
      changed_when: false

    - name: Display pod status
      debug:
        var: pod_status.stdout_lines

    - name: Verify Cert Manager deployment is ready
      shell: |
        kubectl get deployment -n {{ cert_manager_namespace }} {{ cert_manager_release_name }} -o jsonpath='{.status.readyReplicas}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: ready_replicas
      until: ready_replicas.stdout == "1" or ready_replicas.stdout == "2" or ready_replicas.stdout == "3"
      retries: 30
      delay: 10
      changed_when: false

    - name: Display Cert Manager deployment status
      shell: |
        kubectl get deployment -n {{ cert_manager_namespace }} {{ cert_manager_release_name }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: deployment_status
      changed_when: false

    - name: Show deployment status
      debug:
        var: deployment_status.stdout_lines

