---
- name: Create ArgoCD Ingress
  hosts: master1
  become: true
  gather_facts: true
  vars_files:
    - ../vars/main.yml

  tasks:
    - name: Create ArgoCD Ingress manifest
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: {{ argocd_ingress_name }}
          namespace: {{ argocd_namespace }}
          annotations:
            cert-manager.io/cluster-issuer: {{ argocd_cert_issuer }}
        spec:
          ingressClassName: {{ nginx_ingress_release_name }}
          rules:
          - host: {{ argocd_domain }}
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: {{ argocd_server_service_name }}
                    port:
                      number: 80
          tls:
          - hosts:
            - {{ argocd_domain }}
            secretName: {{ argocd_cert_secret_name }}
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: ingress_create
      changed_when: "'created' in ingress_create.stdout or 'configured' in ingress_create.stdout"

    - name: Verify ArgoCD Ingress is created
      shell: |
        kubectl get ingress {{ argocd_ingress_name }} -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: ingress_status
      changed_when: false
      failed_when: false

    - name: Show Ingress status
      debug:
        var: ingress_status.stdout_lines
      when: ingress_status.rc == 0

    - name: Display Ingress details
      shell: |
        kubectl describe ingress {{ argocd_ingress_name }} -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: ingress_details
      changed_when: false
      failed_when: false

    - name: Show Ingress details
      debug:
        var: ingress_details.stdout_lines
      when: ingress_details.rc == 0
