---
- name: Install Metrics Server
  hosts: master1
  become: true
  gather_facts: true
  vars_files:
    - ../vars/main.yml

  tasks:
    - name: Add metrics-server Helm repository
      shell: |
        helm repo add metrics-server {{ metrics_server_repository }}
        helm repo update
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: helm_repo_add
      changed_when: "'metrics-server' in helm_repo_add.stdout or 'has been added' in helm_repo_add.stdout"

    - name: Verify values file exists
      stat:
        path: "{{ metrics_server_values_file }}"
      register: values_file_stat
      delegate_to: localhost
      changed_when: false

    - name: Fail if values file does not exist
      fail:
        msg: "Values file not found at {{ metrics_server_values_file }}"
      when: not values_file_stat.stat.exists

    - name: Copy values file to master node
      copy:
        src: "{{ metrics_server_values_file }}"
        dest: /tmp/metrics-server-values.yaml
        mode: '0644'
      when: values_file_stat.stat.exists

    - name: Create namespace for Metrics Server
      shell: |
        kubectl create namespace {{ metrics_server_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: namespace_create
      changed_when: "'created' in namespace_create.stdout or 'configured' in namespace_create.stdout"

    - name: Install Metrics Server using Helm
      shell: |
        helm upgrade --install {{ metrics_server_release_name }} {{ metrics_server_repository }}/{{ metrics_server_chart }} \
          --namespace {{ metrics_server_namespace }} \
          --version {{ metrics_server_chart_version }} \
          --values /tmp/metrics-server-values.yaml \
          --wait \
          --timeout {{ helm_timeout }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: helm_install
      changed_when: "'STATUS: deployed' in helm_install.stdout or 'has been upgraded' in helm_install.stdout"

    - name: Display Helm installation output
      debug:
        var: helm_install.stdout_lines

    - name: Verify Metrics Server pods are running
      shell: |
        kubectl get pods -n {{ metrics_server_namespace }} -l k8s-app=metrics-server
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: pod_status
      until: >
        pod_status.stdout is defined and
        ('Running' in pod_status.stdout or 'Completed' in pod_status.stdout) and
        '0/2' not in pod_status.stdout and
        '0/1' not in pod_status.stdout
      retries: 30
      delay: 10
      changed_when: false

    - name: Display pod status
      debug:
        var: pod_status.stdout_lines

    - name: Verify Metrics Server deployment is ready
      shell: |
        kubectl get deployment -n {{ metrics_server_namespace }} {{ metrics_server_release_name }} -o jsonpath='{.status.readyReplicas}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: ready_replicas
      until: ready_replicas.stdout == "1" or ready_replicas.stdout == "2"
      retries: 30
      delay: 10
      changed_when: false

    - name: Display Metrics Server deployment status
      shell: |
        kubectl get deployment -n {{ metrics_server_namespace }} {{ metrics_server_release_name }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: deployment_status
      changed_when: false

    - name: Show deployment status
      debug:
        var: deployment_status.stdout_lines

    - name: Verify Metrics Server API is available
      shell: |
        kubectl top nodes
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: metrics_api_check
      changed_when: false
      failed_when: false

    - name: Display metrics API test result
      debug:
        var: metrics_api_check.stdout_lines
      when: metrics_api_check.rc == 0

