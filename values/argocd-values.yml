---
- name: Install ArgoCD
  hosts: master1
  become: true
  gather_facts: true
  vars_files:
    - ../vars/main.yml

  tasks:
    - name: Add ArgoCD Helm repository
      shell: |
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: helm_repo_add
      changed_when: "'argo' in helm_repo_add.stdout or 'has been added' in helm_repo_add.stdout"

    - name: Verify values file exists
      stat:
        path: "{{ argocd_values_file }}"
      register: values_file_stat
      delegate_to: localhost
      changed_when: false

    - name: Fail if values file does not exist
      fail:
        msg: "Values file not found at {{ argocd_values_file }}"
      when: not values_file_stat.stat.exists

    - name: Copy values file to master node
      copy:
        src: "{{ argocd_values_file }}"
        dest: /tmp/argocd-values.yaml
        mode: '0644'
      when: values_file_stat.stat.exists

    - name: Create namespace for ArgoCD
      shell: |
        kubectl create namespace {{ argocd_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: namespace_create
      changed_when: "'created' in namespace_create.stdout or 'configured' in namespace_create.stdout"

    - name: Install ArgoCD using Helm
      shell: |
        helm upgrade --install {{ argocd_release_name }} {{ argocd_repository }}/{{ argocd_chart }} \
          --namespace {{ argocd_namespace }} \
          --values /tmp/argocd-values.yaml \
          --wait \
          --timeout {{ helm_timeout }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: helm_install
      changed_when: "'STATUS: deployed' in helm_install.stdout or 'has been upgraded' in helm_install.stdout"

    - name: Display Helm installation output
      debug:
        var: helm_install.stdout_lines

    - name: Verify ArgoCD pods are running
      shell: |
        kubectl get pods -n {{ argocd_namespace }} -l app.kubernetes.io/name={{ argocd_chart }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: pod_status
      until: >
        pod_status.stdout is defined and
        ('Running' in pod_status.stdout or 'Completed' in pod_status.stdout) and
        '0/2' not in pod_status.stdout and
        '0/1' not in pod_status.stdout
      retries: 30
      delay: 10
      changed_when: false

    - name: Display pod status
      debug:
        var: pod_status.stdout_lines

    - name: Verify ArgoCD server deployment is ready
      shell: |
        kubectl get deployment -n {{ argocd_namespace }} argocd-server -o jsonpath='{.status.readyReplicas}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: ready_replicas
      until: ready_replicas.stdout == "1" or ready_replicas.stdout == "2"
      retries: 30
      delay: 10
      changed_when: false

    - name: Display ArgoCD server deployment status
      shell: |
        kubectl get deployment -n {{ argocd_namespace }} argocd-server
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: deployment_status
      changed_when: false

    - name: Show deployment status
      debug:
        var: deployment_status.stdout_lines

    - name: Get ArgoCD admin password
      shell: |
        kubectl -n {{ argocd_namespace }} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: argocd_password
      changed_when: false
      failed_when: false

    - name: Display ArgoCD admin password
      debug:
        msg: "ArgoCD admin password: {{ argocd_password.stdout }}"
      when: argocd_password.rc == 0
      no_log: false

